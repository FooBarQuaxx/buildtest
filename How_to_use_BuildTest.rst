.. _How_to_use_BuildTest:


How to use buildtest
====================


.. contents::
   :backlinks: none


If you have not completed setup your environment please :ref:`checkout the  setup. <Setup>`


Usage
-----

Let's start with the basics.

If you are unsure about buildtest see the help section (``_buildtest --help``) for more details.

.. program-output:: cat scripts/How_to_use_buildtest/buildtest-help.txt

Building the Test
-----------------

Whenever you want to build a test, check your module environment (``module av``) to find out what software package
exist on your system. Let's build test for ``GCCcore/6.4.0`` module using buildtest

.. program-output:: cat scripts/How_to_use_buildtest/example-GCCcore-6.4.0.txt



Launching Testing
-----------------
buildtest will setup your environment with ctest so you can build from out-of-source directory.
Assuming your $BUILDTEST_TESTDIR is ``/tmp/buildtest-tests``  then you can create an empty
directory called ``/tmp/build`` and run ``cmake ..`` inside the build directory
assuming their is a file ``/tmp/CMakeLists.txt`` generated by buildtest


.. program-output:: cat scripts/How_to_use_buildtest/cmake-build.txt


Afterward run ``ctest .`` to run all the tests.

.. Note:: You want to make sure you run ``ctest .`` in the build directory since ctest will
   generate bunch of scripts in the directory you ran ``cmake``


.. program-output:: cat scripts/How_to_use_buildtest/run-GCCcore-6.4.0.txt

buildtest Interactive Testing (``buildtest --runtest``)
-------------------------------------------------------

buildtest comes with a menu driven test that can be used
as an alternate method to ``ctest``. Just run ``buildtest --runtest``
after you created a few tests and follow the prompt to navigate to
the appropriate test

.. program-output:: cat scripts/How_to_use_buildtest/runtest.txt

TAB Argument Completion
-----------------------

buildtest use the argcomplete python module to autocomplete buildtest argument.
Just press TAB key on the keyboard to fill in the arguments.

For instance if you just type ``buildtest`` followed by TAB you should see the
following.

.. code::

        [siddis14@amrndhl1157 buildtest-framework]$ _buildtest -
        --clean-logs                  --findconfig                  --list-toolchain              --runtest                     -svr                          -V
        --clean-tests                 --findtest                    --list-unique-software        -s                            --system                      --version
        --diff-trees                  -ft                           --logdir                      --scantest                    --sysyaml
        --easyconfigs-in-moduletrees  -h                            -ls                           --shell                       -t
        --ebyaml                      --help                        -lt                           --software                    --testdir
        -ecmt                         --ignore-easybuild            -mns                          --software-version-relation   --testset
        -fc                           --job-template                --module-naming-scheme        --submitjob                   --toolchain

.. Note:: You will need to press the TAB key few times before it shows all the
   args

TAB completion works for choice parameters like ``--shell``, ``--software``,
``--toolchain``, ``--system``, ``--sysyaml``, ``--ebyaml``, ``--python-package``,
``--perl-package``, ``--r-package``, ``--ruby-package``

TAB complete on --software
~~~~~~~~~~~~~~~~~~~~~~~~~~


TAB complete on ``--software`` option will present all unique software found in module tree
defined by ``BUILDTEST_MODULE_ROOT``


.. code::

   [siddis14@amrndhl1228 buildtest-framework]$ _buildtest --software
   Display all 193 possibilities? (y or n)
   ACTC/.1.1                                          Ghostscript/.9.19                                  M4/.1.4.17
   Advisor/2017_update1                               git/2.10.2                                         Mako/.1.0.6-Python-2.7.12
   Amber/14-AmberTools-15-patchlevel-13-13            git-lfs/1.1.1                                      Mesa/17.0.2
   Anaconda2/4.2.0                                    GLib/.2.49.5                                       motif/.2.3.5
   Anaconda3/4.2.0                                    GLPK/4.60                                          NAMD/2.12-mpi
   Aspera-Connect/3.6.1                               GMP/6.1.1                                          NASM/.2.12.02
   Autoconf/.2.69                                     Go/1.9                                             ncurses/.6.0
   Automake/.1.15                                     gompi/.2016.03                                     netCDF/4.4.1
   --More--

TAB complete on --toolchain
~~~~~~~~~~~~~~~~~~~~~~~~~~~

TAB completion on ``--toolchain`` will present all easybuild toolchains installed
in the software stack

.. code::

   [siddis14@amrndhl1228 buildtest-framework]$ _buildtest --toolchain
   foss/.2016.03                        GCCcore/.5.4.0                       iccifort/.2017.1.132-GCC-5.4.0-2.27  intelcuda/2017.01
   foss/.2016.09                        GCCcore/.6.2.0                       iccifortcuda/.2017.01                iompi/2017.01
   foss/.2016b                          gompi/.2016.03                       iimpi/.2017.01-GCC-5.4.0-2.27
   GCC/5.4.0-2.27                       gompi/.2016.09                       iimpic/.2017.01
   GCC/6.2.0-2.27                       gompi/.2016b                         intel/2017.01

TAB complete on --system
~~~~~~~~~~~~~~~~~~~~~~~~

TAB completion on ``--system`` will display all the system package that have a yaml
file typically found in directory ``$BUILDTEST_CONFIGS_REPO/system`` directory.

.. code::

        [siddis14@amrndhl1228 buildtest-framework]$ _buildtest --system
        acl                 coreutils           gcc                 hwloc               perl                rpm                 time                yum
        all                 curl                gcc-c++             iptables            pinfo               ruby                util-linux          zip
        binutils            diffstat            gcc-gfortran        ltrace              powertop            sed                 wget
        CentrifyDC-openssh  file                git                 ncurses             procps-ng           strace              which
        chrony              firefox             htop                numactl             python              systemd             xz

TAB complete on --sysyaml
~~~~~~~~~~~~~~~~~~~~~~~~~

TAB completion ``--sysyaml`` will present all system package available on your
system. If you are using Centos, RHEL, or Fedora then you will be using yum
as your package manager. This output is extracted by getting output of ``rpm -qa``

.. code::

        [siddis14@amrndhl1228 buildtest-framework]$ _buildtest --sysyaml
        Display all 1695 possibilities? (y or n)
        abattis-cantarell-fonts                         libnl3                                          python-custodia
        abrt                                            libnl3-cli                                      python-dateutil
        abrt-addon-ccpp                                 libnotify                                       python-decorator
        abrt-addon-kerneloops                           liboauth                                        python-deltarpm
        abrt-addon-pstoreoops                           libogg                                          python-devel
        abrt-addon-python                               libosinfo                                       python-dmidecode
        abrt-addon-vmcore                               libotf                                          python-dns
        abrt-addon-xorg                                 libpath_utils                                   python-enum34
        abrt-cli                                        libpcap                                         python-ethtool
        abrt-console-notification                       libpciaccess                                    python-gssapi
        --More--

TAB completion on ``--ebyaml``
------------------------------

Tab completion on ``--ebyaml`` will show which software packages you can generate yaml configuration
for binary test. The options are auto-populated based on modules found in BUILDTEST_MODULE_ROOT. Whenever you
you create a yaml configuration using ``--ebyaml`` such as ``_buildtest --ebyaml libGLU/9.0.0-intel-2018a`` then buildtest
will remove this entry from the list of choices to avoid buildtest from overwriting yaml configuration once it is made.


.. code::

    (buildtest) [siddis14@amrndhl1157 buildtest-framework]$ _buildtest --ebyaml lib
    libdrm/2.4.88-GCCcore-6.4.0        libharu/2.3.0-foss-2018a           libpng/1.6.32-GCCcore-6.4.0        libtool/2.4.6-GCCcore-6.4.0        libxml2/2.9.4-GCCcore-6.4.0
    libffi/3.2.1-GCCcore-6.4.0         libjpeg-turbo/1.5.2-GCCcore-6.4.0  libreadline/7.0-GCCcore-6.4.0      libunistring/0.9.7-GCCcore-6.4.0   libxsmm/1.8.3-intel-2018a
    libGLU/9.0.0-intel-2018a           libmatheval/1.1.11-GCCcore-6.4.0   libsndfile/1.0.28-GCCcore-6.4.0    libxc/3.0.1-intel-2018a

System Package Test
-------------------

buildtest can generate tests for system packages using the option ``_buildtest --system <package>``.
Currently, system package test only perform binary test. This means you need to
find the binaries associated with the package and add the executable and any
parameters in ``command.yaml``.

This file will be ``$BUILDTEST_CONFIGS_REPO/buildtest/system/$pkg/command.yaml`` where $pkg is
name of system package. At this moment, buildtest is using Redhat package
naming convention.

For instance to build test for the system package ``gcc`` you can do the following

.. code::

   _buildtest --system gcc


To run all system package test you can do the following

.. code::

   _buildtest --system all


Log files
---------

All buildtest logs will be written in ``BUILDTEST_LOGDIR``.

buildtest will store log files for ``_buildtest -s <app_name>/<app_ver>`` in
``BUILDTEST_LOGDIR/<app_name>/<app_ver>``. If toolchain option is specified for
instance ``buildtest -s <app_name>/<app_ver> -t <tc_name>/<tc_ver>`` then
buildtest will store the logs in ``BUILDTEST_LOGDIR/<app_name>/<app_ver>/<tc_name>/<tc_ver>``.

Similarly logs for system tests like ``_buildtest --system <package>`` will be stored in ``BUILDTEST_LOGDIR/system/<package>``

You may override BUILDTEST_LOGDIR option at command line via ``_buildtest --logdir``
and you may even store individual buildtest runs in separate directories such as
the following

.. code::

   buildtest -s OpenMPI/3.0.0-GCC-6.4.0-2.28 --logdir=/tmp
